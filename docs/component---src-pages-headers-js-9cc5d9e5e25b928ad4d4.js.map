{"version":3,"sources":["webpack:///./src/components/example-group.js","webpack:///./src/components/reveal-type-white-space.js","webpack:///./src/pages/headers.js","webpack:///./src/utils/get-css-variable.js","webpack:///./src/components/example-hx.js"],"names":["ExampleGroup","children","className","RevealTypeWhiteSpace","lineHeight","fontSize","topMargin","bottomMargin","unit","defaultReveal","useState","isRevealing","setIsRevealing","onClick","style","height","top","width","position","rows","i","push","key","getBackground","bottom","Headers","titleGenerator","LoremIpsum","wordsPerSentence","max","min","level","title","subtitle","styleName","generateSentences","getCssVariable","varName","window","getComputedStyle","document","body","getPropertyValue","getCssFontMetrics","variantName","size","sizeStyle","lineHeightStyle","postfix","fontSizeStyle","topMarginStyle","bottomMarginStyle","cssUnits","parse","lineHeightNum","convert","topMarginNum","bottomMarginNum","value","ExampleHx","fontMetrics","console","log"],"mappings":"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","file":"component---src-pages-headers-js-9cc5d9e5e25b928ad4d4.js","sourcesContent":["import \"./example-group.css\"\nimport React from \"react\"\n\nconst ExampleGroup = ({ children }) => {\n  return <div className=\"example-group\">{children}</div>\n}\n\nexport default ExampleGroup\n","import \"./reveal-type-white-space.css\"\nimport React, { useState } from \"react\"\nimport { IoMdEyeOff, IoMdEye } from \"react-icons/io\"\nimport IconButton from \"./icon-button\"\n\nconst RevealTypeWhiteSpace = ({\n  children,\n  lineHeight = 20,\n  fontSize = 10,\n  topMargin = 0,\n  bottomMargin = 0,\n  unit = \"pt\",\n  defaultReveal = false,\n}) => {\n  const getBackground = () => {\n    let rows = []\n    for (let i = 0; i < 20; i++) {\n      rows.push(\n        <div\n          key={i}\n          className=\"reveal-type-white-space__bg-row\"\n          style={{ height: `${lineHeight}${unit}`, position: \"relative\" }}\n        >\n          <div\n            className=\"reveal-type-white-space__bg-row__text-height\"\n            style={{\n              height: `${fontSize}${unit}`,\n              position: \"relative\",\n              top: `${(lineHeight - fontSize) / 2}${unit}`,\n              fontSize: `8pt`,\n              lineHeight: `${fontSize}${unit}`,\n            }}\n          >\n            {i === 0 && (\n              <div\n                className=\"reveal-type-white-space__bg-row__text-height-label\"\n                style={{ height: `${fontSize}${unit}` }}\n              >\n                {`${fontSize}${unit}`}\n              </div>\n            )}\n          </div>\n          <div className=\"reveal-type-white-space__bg-row__right-margin\" />\n        </div>\n      )\n    }\n    return rows\n  }\n\n  const [isRevealing, setIsRevealing] = useState(defaultReveal)\n\n  return (\n    <div\n      className={`reveal-type-white-space ${\n        isRevealing\n          ? \"reveal-type-white-space--active\"\n          : \"reveal-type-white-space--inactive\"\n      }`}\n    >\n      <div className=\"reveal-type-white-space__button\">\n        <IconButton\n          onClick={() => setIsRevealing(!isRevealing)}\n          className=\"reveal-type-white-space__icon-button\"\n        >\n          <IoMdEye className=\"reveal-type-white-space__button__icon\" />\n        </IconButton>\n      </div>\n\n      <div\n        className=\"reveal-type-white-space__type\"\n        onClick={() => setIsRevealing(!isRevealing)}\n      >\n        {children}\n\n        <div className=\"reveal-type-white-space__leading\">\n          <div\n            className=\"reveal-type-white-space__top-margin\"\n            style={{\n              height: `${topMargin}${unit}`,\n              top: `-${topMargin}${unit}`,\n              width: \"100%\",\n              position: \"absolute\",\n            }}\n          >\n            {topMargin > 0 && (\n              <span className=\"reveal-type-white-space__top-margin__label\">\n                {topMargin}\n                {unit}\n              </span>\n            )}\n          </div>\n          <div className=\"reveal-type-white-space__lines\">\n            {getBackground()}\n          </div>\n\n          <div\n            className=\"reveal-type-white-space__bottom-margin\"\n            style={{\n              height: `${bottomMargin}${unit}`,\n              width: \"100%\",\n              position: \"absolute\",\n              bottom: `-${bottomMargin}${unit}`,\n            }}\n          >\n            {bottomMargin > 0 && (\n              <span className=\"reveal-type-white-space__bottom-margin__label\">\n                {bottomMargin}\n                {unit}\n              </span>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default RevealTypeWhiteSpace\n","import \"./page.css\"\nimport React from \"react\"\nimport { LoremIpsum } from \"lorem-ipsum\"\n\nimport Layout from \"../components/layout\"\nimport StyleHx from \"../components/style-hx\"\nimport ExampleGroup from \"../components/example-group\"\nimport ExampleRow from \"../components/example-row\"\nimport ExampleLabel from \"../components/example-label\"\nimport ExampleHx from \"../components/example-hx\"\nimport RevealTypeWhiteSpace from \"../components/reveal-type-white-space\"\n\nconst Headers = () => {\n  const titleGenerator = new LoremIpsum({\n    wordsPerSentence: {\n      max: 8,\n      min: 4,\n    },\n  })\n  return (\n    <Layout>\n      <article className=\"page page--headers\">\n        <header className=\"page__header\">\n          <StyleHx level={1}>Styling Headers</StyleHx>\n        </header>\n        <section>\n          <ExampleGroup>\n            <ExampleRow>\n              <ExampleLabel title=\"Heading 1\" subtitle=\"Open Sans 600, 24pt\" />\n\n              <ExampleHx level={1} styleName=\"header-1\">\n                {titleGenerator.generateSentences(1)}\n              </ExampleHx>\n            </ExampleRow>\n          </ExampleGroup>\n          <ExampleGroup>\n            <ExampleRow>\n              <ExampleLabel title=\"Heading 2\" subtitle=\"Open Sans 500, 20pt\" />\n              <ExampleHx level={2} styleName=\"header-2\">\n                {titleGenerator.generateSentences(1)}\n              </ExampleHx>\n            </ExampleRow>\n          </ExampleGroup>\n          <ExampleGroup>\n            <ExampleRow>\n              <ExampleLabel title=\"Heading 3\" subtitle=\"Open Sans 500, 16pt\" />\n              <ExampleHx level={3} styleName=\"header-3\">\n                {titleGenerator.generateSentences(1)}\n              </ExampleHx>\n            </ExampleRow>\n          </ExampleGroup>\n          <ExampleGroup>\n            <ExampleRow>\n              <ExampleLabel title=\"Heading 4\" subtitle=\"Open Sans 500, 14pt\" />\n              <ExampleHx level={4} styleName=\"header-4\">\n                {titleGenerator.generateSentences(1)}\n              </ExampleHx>\n            </ExampleRow>\n          </ExampleGroup>\n          <ExampleGroup>\n            <ExampleRow>\n              <ExampleLabel title=\"Heading 5\" subtitle=\"Open Sans 500, 11pt\" />\n              <ExampleHx level={5} styleName=\"header-5\">\n                {titleGenerator.generateSentences(1)}\n              </ExampleHx>\n            </ExampleRow>\n          </ExampleGroup>\n        </section>\n      </article>\n    </Layout>\n  )\n}\n\nexport default Headers\n","import cssUnits from \"units-css\"\n\nconst getCssVariable = varName => {\n  // window.getComputedStyle is not available during SSR.\n  const style =\n    typeof window !== `undefined`\n      ? window.getComputedStyle(document.body).getPropertyValue(varName)\n      : \"\"\n  // console.log(\"getCssVariable\", varName, style)\n\n  return style\n  //return document.body.style.getPropertyValue(varName)\n}\n\nconst getCssFontMetrics = (styleName = \"none\", variantName) => {\n  if (typeof window === `undefined`) {\n    return {\n      size: 0,\n      sizeStyle: \"0px\",\n      lineHeight: 0,\n      lineHeightStyle: \"0px\",\n      topMargin: 0,\n      bottomMargin: 0,\n      unit: \"px\",\n    }\n  }\n\n  const postfix = variantName ? `--${variantName}` : \"\"\n  const fontSizeStyle = getCssVariable(`--${styleName}-font-size${postfix}`)\n  const lineHeightStyle = getCssVariable(`--${styleName}-line-height${postfix}`)\n  const topMarginStyle = getCssVariable(`--${styleName}-top-margin${postfix}`)\n  const bottomMarginStyle = getCssVariable(\n    `--${styleName}-bottom-margin${postfix}`\n  )\n  // console.log(\n  //   \"getCssFontMetrics\",\n  //   `--${styleName}-font-size${postfix}`,\n  //   fontSizeStyle,\n  //   lineHeightStyle\n  // )\n\n  const size = cssUnits.parse(fontSizeStyle)\n\n  const lineHeight = cssUnits.parse(lineHeightStyle)\n  const lineHeightNum = cssUnits.convert(\n    size.unit,\n    lineHeightStyle,\n    document.body\n  )\n  const topMarginNum = cssUnits.convert(\n    size.unit,\n    topMarginStyle,\n    document.body\n  )\n  const bottomMarginNum = cssUnits.convert(\n    size.unit,\n    bottomMarginStyle,\n    document.body\n  )\n\n  return {\n    size: size.value,\n    sizeStyle: `${size.value}${size.unit}`,\n    lineHeight: lineHeightNum,\n    lineHeightStyle: `${lineHeightNum}${size.unit}`,\n    topMargin: topMarginNum,\n    bottomMargin: bottomMarginNum,\n    unit: size.unit,\n  }\n}\n\nexport { getCssVariable, getCssFontMetrics }\n","import React from \"react\"\nimport { getCssVariable, getCssFontMetrics } from \"../utils/get-css-variable\"\nimport StyleHx from \"./style-hx\"\nimport RevealTypeWhiteSpace from \"./reveal-type-white-space\"\n\n/* the semantic level and visual size can be set independantly */\n\nconst ExampleHx = ({\n  styleName,\n  variantName,\n  level = 1,\n  className = \"\",\n  children,\n}) => {\n  const fontMetrics = getCssFontMetrics(styleName)\n\n  console.log(\"fontMetrics\", styleName, fontMetrics)\n  return (\n    <RevealTypeWhiteSpace\n      fontSize={fontMetrics.size}\n      lineHeight={fontMetrics.lineHeight}\n      unit={fontMetrics.unit}\n      topMargin={fontMetrics.topMargin}\n      bottomMargin={fontMetrics.bottomMargin}\n    >\n      <StyleHx level={level}>{children}</StyleHx>\n    </RevealTypeWhiteSpace>\n  )\n}\n\nexport default ExampleHx\n"],"sourceRoot":""}