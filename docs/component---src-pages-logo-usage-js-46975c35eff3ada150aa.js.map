{"version":3,"sources":["webpack:///./src/components/example-group.js","webpack:///./src/components/style-display-text.js","webpack:///./src/pages/logo-usage.js","webpack:///./src/components/example-text-block.js"],"names":["ExampleGroup","children","className","StyleDisplayText","Logo","LoremIpsum","wordsPerSentence","max","min","sentencesPerParagraph","level","variantName","title","subtitle","display","src","resolvePath","size","unit","ExampleTextBlock","styleName","fontMetrics","getCssFontMetrics","console","log","fontSize","lineHeight","topMargin","bottomMargin"],"mappings":"2FAAA,mCAOeA,IAJM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,OAAO,yBAAKC,UAAU,iBAAiBD,K,kCCJzC,mCAOeE,IAJU,SAAC,GAAD,IAAGF,EAAH,EAAGA,SAAH,OACvB,uBAAGC,UAAU,sBAAsBD,K,kCCJrC,gNAoGeG,UAnFF,WACY,IAAIC,aAAW,CACpCC,iBAAkB,CAChBC,IAAK,EACLC,IAAK,KAIa,IAAIH,aAAW,CACnCI,sBAAuB,CACrBF,IAAK,GACLC,IAAK,KAIkB,IAAIH,aAAW,CACxCI,sBAAuB,CACrBF,IAAK,EACLC,IAAK,KAIT,OACE,kBAAC,IAAD,KACE,6BAASN,UAAU,sBACjB,4BAAQA,UAAU,gBAChB,kBAAC,IAAD,CAASQ,MAAO,GAAhB,yBAGF,iCACE,kBAAC,IAAD,CAAQC,YAAY,UACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAM,mBACNC,SAAS,qDAEX,yBAAKX,UAAU,+BACb,kBAAC,IAAD,CAAqBY,QAAQ,SAC3B,yBAAKZ,UAAU,uBACb,yBACEA,UAAU,4BACVa,IAAKC,YACH,iDAGJ,yBAAKd,UAAU,mCACb,kBAAC,IAAD,CAAYe,KAAK,KAAKC,KAAK,aAOvC,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEN,MAAM,qBACNC,SAAS,qDAEX,yBAAKX,UAAU,+BACb,kBAAC,IAAD,CAAqBY,QAAQ,SAC3B,yBAAKZ,UAAU,uBACb,yBACEA,UAAU,iCACVa,IAAKC,YACH,4CAGJ,yBAAKd,UAAU,mCACb,kBAAC,IAAD,CAAYe,KAAK,KAAKC,KAAK,kB,kCCvFjD,6DA6BeC,IAtBU,SAAC,GAKnB,IAJLC,EAII,EAJJA,UACAT,EAGI,EAHJA,YAEAV,GACI,EAFJC,UAEI,EADJD,UAEMoB,EAAcC,YAAkBF,EAAWT,GAGjD,OADAY,QAAQC,IAAI,cAAeJ,EAAWC,GAEpC,kBAAC,IAAD,CACEI,SAAUJ,EAAYJ,KACtBS,WAAYL,EAAYK,WACxBR,KAAMG,EAAYH,KAClBS,UAAWN,EAAYM,UACvBC,aAAcP,EAAYO,cAEzB3B","file":"component---src-pages-logo-usage-js-46975c35eff3ada150aa.js","sourcesContent":["import \"./example-group.css\"\nimport React from \"react\"\n\nconst ExampleGroup = ({ children }) => {\n  return <div className=\"example-group\">{children}</div>\n}\n\nexport default ExampleGroup\n","import \"./style-display-text.css\"\nimport React from \"react\"\n\nconst StyleDisplayText = ({ children }) => (\n  <p className=\"style-display-text\">{children}</p>\n)\n\nexport default StyleDisplayText\n","import \"./logo-usage.css\"\nimport React from \"react\"\nimport { withPrefix } from \"gatsby\"\nimport { LoremIpsum } from \"lorem-ipsum\"\nimport resolvePath from \"../utils/resolve-path\"\nimport Layout from \"../components/layout\"\nimport StyleHx from \"../components/style-hx\"\nimport ExampleRow from \"../components/example-row\"\nimport ExampleGroup from \"../components/example-group\"\nimport ExampleLabel from \"../components/example-label\"\nimport ExampleHx from \"../components/example-hx\"\nimport ExampleTextBlock from \"../components/example-text-block\"\nimport RevealBoxWhiteSpace from \"../components/reveal-box-white-space\"\nimport StyleP from \"../components/style-p\"\nimport StyleDisplayText from \"../components/style-display-text\"\nimport { VDimension } from \"../components/dimensions\"\n\nconst Logo = () => {\n  const titleGenerator = new LoremIpsum({\n    wordsPerSentence: {\n      max: 8,\n      min: 4,\n    },\n  })\n\n  const textGenerator = new LoremIpsum({\n    sentencesPerParagraph: {\n      max: 12,\n      min: 6,\n    },\n  })\n\n  const shortTextGenerator = new LoremIpsum({\n    sentencesPerParagraph: {\n      max: 8,\n      min: 4,\n    },\n  })\n\n  return (\n    <Layout>\n      <article className=\"page page--headers\">\n        <header className=\"page__header\">\n          <StyleHx level={1}>PREreview Logo Usage</StyleHx>\n        </header>\n\n        <section>\n          <StyleP variantName=\"large\"></StyleP>\n          <ExampleGroup>\n            <ExampleRow>\n              <ExampleLabel\n                title=\"Wide Header Logo\"\n                subtitle=\"When space permits, the full logo should be used\"\n              />\n              <div className=\"logo-usage__nav-bar-example\">\n                <RevealBoxWhiteSpace display=\"block\">\n                  <div className=\"logo-usage__nav-bar\">\n                    <img\n                      className=\"logo-usage__nav-bar__logo\"\n                      src={resolvePath(\n                        \"/images/prereview_logo_h_colour_cropped.svg\"\n                      )}\n                    />\n                    <div className=\"logo-usage__nav-bar__logo_v-dim\">\n                      <VDimension size=\"48\" unit=\"px\" />\n                    </div>\n                  </div>\n                </RevealBoxWhiteSpace>\n              </div>\n            </ExampleRow>\n          </ExampleGroup>\n          <ExampleGroup>\n            <ExampleRow>\n              <ExampleLabel\n                title=\"Narrow Header Logo\"\n                subtitle=\"On narrow screen, the icon-only logo may be used\"\n              />\n              <div className=\"logo-usage__nav-bar-example\">\n                <RevealBoxWhiteSpace display=\"block\">\n                  <div className=\"logo-usage__nav-bar\">\n                    <img\n                      className=\"logo-usage__nav-bar__icon-logo\"\n                      src={resolvePath(\n                        \"/images/prereview_logo_icon_colour.svg\"\n                      )}\n                    />\n                    <div className=\"logo-usage__nav-bar__logo_v-dim\">\n                      <VDimension size=\"48\" unit=\"px\" />\n                    </div>\n                  </div>\n                </RevealBoxWhiteSpace>\n              </div>\n            </ExampleRow>\n          </ExampleGroup>\n        </section>\n      </article>\n    </Layout>\n  )\n}\n\nexport default Logo\n","import React from \"react\"\nimport { getCssVariable, getCssFontMetrics } from \"../utils/get-css-variable\"\nimport StyleHx from \"./style-hx\"\nimport RevealTypeWhiteSpace from \"./reveal-type-white-space\"\n\n/* the semantic level and visual size can be set independantly */\n\nconst ExampleTextBlock = ({\n  styleName,\n  variantName,\n  className = \"\",\n  children,\n}) => {\n  const fontMetrics = getCssFontMetrics(styleName, variantName)\n\n  console.log(\"fontMetrics\", styleName, fontMetrics)\n  return (\n    <RevealTypeWhiteSpace\n      fontSize={fontMetrics.size}\n      lineHeight={fontMetrics.lineHeight}\n      unit={fontMetrics.unit}\n      topMargin={fontMetrics.topMargin}\n      bottomMargin={fontMetrics.bottomMargin}\n    >\n      {children}\n    </RevealTypeWhiteSpace>\n  )\n}\n\nexport default ExampleTextBlock\n"],"sourceRoot":""}